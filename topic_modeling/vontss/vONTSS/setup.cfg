[metadata]
name = vontss
version = 1.0
description = Vontss
long_description = file: README.md
long_description_content_type = text/markdown

[options]
zip_safe = True
include_package_data = True
package_dir =
    = src
packages = find:

########################################################################
# Brazil options
########################################################################
# Control whether to install scripts to $ENVROOT/bin. The valid values are:
# * default-only: install scripts for the version corresponding to
#   Python-default in your version set. If this package doesn't build for
#   that version, you won't get root scripts.
# * True: always install scripts for some version of python that the package
#   builds for (in practice, this will be the last version that is built).
#   Note that in this case, you also need to ensure that the appropriate
#   runtime interpreter is in the dependency closure of your environment.
# * <a specific python version, e.g. python3.6 or jython2.7>: only
#   attempt to install root scripts for the specific interpreter version. If
#   this package is in a version set where that interpreter is not enabled,
#   you won't get root scripts. You almost certainly don't want this.
root_script_source_version = default-only

# The test runner for BrazilPython
test_command = brazilpython_pytest

# Use custom sphinx command which adds an index.html that's compatible with
# code.amazon.com links.
doc_command = amazon_doc_utils_build_sphinx

# Enable build-time format checking
check_format = True

# Enable type checking
test_mypy = True

# Enable linting at build time
test_flake8 = True

[options.packages.find]
where = src
exclude =
    test

[options.package_data]
package_data =
    = ["py.typed"]

[aliases]
# Define this so we don't resolve to the wrong setuptools 'test' entrypoint when
# invoking brazil-build test.
test = brazil_test
# Shorter, easier command to run the static type checker
mypy = brazilpython_mypy
# This is needed so the setting below has effect
build_sphinx = amazon_doc_utils_build_sphinx


[options.entry_points]
# declare your scripts
# If you want to create any Python executables in bin/, define them here.
# This is a three-step process:
#
# 1. Create the function you want to run on the CLI in src/vontss/cli.py
#    For convenience I usually recommend calling it main()
#
# 2. Uncomment this section of the setup.cfg options; this will create
#    bin/Vontss (which you can obviously change!) as a script
#    that will call your main() function, above.
#
# console_scripts =
#     Vontss = vontss.cli:main
#
# 3. Uncomment the Python interpreter and Python-setuptools in the
#   dependencies section of your Config. This is necessary to guarantee the
#   presence of a runtime interpreter and for the script generated by
#   setuptools to find its function.

# Configuration for pytest; enable coverage for Vontss, emit
# XML, HTML, and terminal reports.
[tool:pytest]
xfail_strict = true
addopts =
    --verbose
    --ignore=build/private
    --cov vontss
    --cov-config setup.cfg
    --cov-report term-missing
    --cov-report html:build/brazil-documentation/coverage
    --cov-report xml:build/brazil-documentation/coverage/coverage.xml
    # show the slowest 5 tests at the end
    --durations=5
    # Default to colorful output
    --color=yes
    # Uncomment to enforce a minimum code coverage threshold.
    # --cov-fail-under 50
testpaths = test
looponfailroots = src test

# Additional coverage.py settings. The parallel flag and source values are
# necessary so that pytest-cov knows to alias the brazil build artifact absolute
# paths to the relative ones from your package source.
[coverage:run]
branch = true
parallel = true

[coverage:paths]
source =
    src/
    build/lib/*/site-packages/

[coverage:html]
directory = build/brazil-documentation/coverage

[coverage:xml]
output = build/brazil-documentation/coverage/coverage.xml

# Code formatting configuration.
[brazilpython_formatters]
include = test
formatters = black,isort
autopep8_opts =
    --max-line-length=100

[brazilpython_flake8]
include =
    test

[flake8]
ignore =
    # Not pep8, black adds whitespace before ':'
    E203,
    # Not pep8, black adds line break before binary operator
    W503,
    # Once `bb format` is done with things, the only remaining long lines do not
    # matter; we can ignore them.
    E501,
max_line_length = 100
# Uncomment to enforce a maximum cyclomatic complexity - more info https://en.wikipedia.org/wiki/Cyclomatic_complexity
# max_complexity=10

[build_sphinx]
warning-is-error = 1
